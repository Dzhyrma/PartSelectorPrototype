//created on: 15-May-2013
package main

import com.models.AssemblyNode;
import com.models.Reference;
import classes.InputParameters;
import com.helpers.RuleResult;
import com.helpers.AuxiliaryMethods;
import com.models.HashVector;
import classes.Part;

rule "A stand alone rule"
	when
		InputParameters( $params : parameters,
						 parameters["Screw"] != null,
						 parameters["ScrewNut"] != null,
						 parameters["Washer"] != null)
		$assemblyNode1 : AssemblyNode(
									  $part1 : part,
									  ((Class)$params["Screw"]).isAssignableFrom($part1.class),
									  $ref1 : ref)
		$assemblyNode2 : AssemblyNode(
									  $assemblyNode1 != this,
									  $part2 : part,
									  ((Class)$params["ScrewNut"]).isAssignableFrom($part2.class),
									  $ref2 : ref,
									  AuxiliaryMethods.getField("getLength", $part1) > AuxiliaryMethods.getDistance($ref1, $ref2))
		$assemblyNode3 : AssemblyNode(
									  $assemblyNode1 != this,
									  $assemblyNode2 != this,
									  $part3 : part,
									  ((Class)$params["Washer"]).isAssignableFrom($part3.class),
									  $ref3 : ref,
									  AuxiliaryMethods.getField("getLength", $part1) > AuxiliaryMethods.getDistance($ref1, $ref3),
									  AuxiliaryMethods.getField("getLength", $part1) > AuxiliaryMethods.getDistance($ref2, $ref3),
									  AuxiliaryMethods.getTriangleArea($ref1, $ref2, $ref3) < 0.000001)
	then
		HashVector result = new HashVector();
		result.addPart($part1);
		result.addPart($part2);
		result.addPart($part3);
		RuleResult.getInstance().addResult(result);
		System.out.println( "Screw: " + $part1.getName() + ", ScrewNut: " + $part2.getName() + ", Washer: " + $part3.getName());

end

